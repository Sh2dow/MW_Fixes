#include <Windows.h>
#include <injector\injector.hpp>
#include <IniReader\IniReader.h>

// Timebug fixing stuff
DWORD GlobalTimerAddress = 0x009885D8;
DWORD TimerAddress = 0x009142DC;
float PreviousRaceTime = 0.0f;
bool TimebugFixEnabled = 0;
bool StabilityPatchesEnabled = 0;
bool ShouldAddPurecallHandler = 0;
bool PreventPurecalls = 0;


/*
 *	Patch note	00464EE6
 *				00464F47 mov	eax, [esp+20h+use_best_fit]
 *
 *	Changed that to 
 *	xor eax, eax
 *	
 *	to manually fail the "use_best_fit" test
*/
void FixMemory()
{
    // Disable memory checks 
    injector::WriteMemory<int>(0x00464EE6, 0x9090C031, true); // xor eax, eax
    // nop
    // nop

    injector::WriteMemory<int>(0x00464F47, 0x9090C031, true); // xor eax, eax
    // nop
    // nop
}

/*
 *	Patch note: 0057D105 mov edx, [ecx] ; possible null-pointer.
 *
 *	Can sometimes happen when unloading cops (? or roadblocks ?)
 *
 *	Added sanity checks to not dereference null
 */
void FixSub_0057D0F0()
{
    char fix[] = {
        0x85, 0xC9, // test ecx, ecx
        0x74, 0xFA, // je 057d11f
        0x8B, 0x11, // mov edx, [ecx]
        0xEB, 0xDE,
    }; // jmp 0057D107

    char call[] = {0xEB, 0x1A}; // jmp 0057D121

    injector::WriteMemoryRaw(0x0057D121, fix, sizeof(fix), true);
    injector::WriteMemoryRaw(0x0057D105, call, sizeof(call), true);
}

void FixPurecall()
{
    if (!PreventPurecalls)
        return;

    /*
     *		Patch idea: the edx contains a ptr to class vtbl
     *		since we know that, we can determine the failing class (vtbl @ 0x00890970)
     *		if we catch this failing class, exit the function with 0 immideatly,
     *		otherwise continue as normal.
     *
     *		Pseudocode:
     *
     *		cmp edx, 00890970h		; if edx != 0x00890970
     *		jne normal_operation	; continue normal operation
     *		xor eax, eax			; else eax = 0 (result = 0)
     *		jmp return				; exit the function
     *	normal_operation:
     *		call dword ptr[edx+80h] ; call the virtual function if it exists
     *		jmp continue			; continue normal operation
     *
     *		Sliced in parts because of space limitations
     */

    char callFix[] = {
        0xE9, 0x0B, 0xFD, 0xFF, 0xFF, // jmp 0043DD15h
        0x90
    }; // nop

    char fixDD15[] = {
        0x81, 0xFA, 0x70, 0x09, 0x89, 0x00, // cmp edx, 00890970h
        0x75, 0xD8, // jne 0043DCF5h
        0xEb, 0xC6
    }; // jmp 0043DCE5h

    char fixDCF5[] = {
        0xFF, 0x92, 0x80, 0x00, 0x00, 0x00, // call dword ptr[edx+ACh]
        0xE9, 0x0B, 0x03, 0x00, 0x00
    }; // jmp  0043E00Bh

    char fixDCE5[] = {
        0x31, 0xC0, // xor eax, eax
        0xE9, 0x20, 0x05, 0x00, 0x00
    }; // jmp 0043E20Ch

    injector::WriteMemoryRaw(0x0043E005, callFix, sizeof(callFix), true); // patch call
    injector::WriteMemoryRaw(0x0043DD15, fixDD15, sizeof(fixDD15), true);
    injector::WriteMemoryRaw(0x0043DCF5, fixDCF5, sizeof(fixDCF5), true);
    injector::WriteMemoryRaw(0x0043DCE5, fixDCE5, sizeof(fixDCE5), true);
}

/*
 *	Patch note: replace default _purecall handler to generate dumps
 *
 *	Replaces a call to a random nullsub
 */
[[deprecated("Deprecated due to MWCrashFix merge.")]]
void AddPurecallHandler()
{
    if (!ShouldAddPurecallHandler)
        return;
    char handler[] = {
        0x31, 0xC0, // xor eax, eax
        0x8B, 0x00, // mov eax, [eax]	; crashes immediately 
        0xC3
    }; // ret				; just in case

    char replaceHandler[] = {
        0x68, 0xB0, 0X56, 0x7C, 0x00, // push 007C56B0	; new purecall handler address
        0xE8, 0x61, 0xFB, 0xFF, 0xFF, // call 007C5220	; _set_purecall_handler
        0x83, 0xC4, 0x04, // add  esp, 04h	; restore stack (__cdecl)
        0xC3
    }; // ret

    char callPatch[] = {0xE8, 0x7B, 0x19, 0x16, 0x00}; // call 007C56B5

    injector::WriteMemoryRaw(0x007C56B0, handler, sizeof(handler), true);
    injector::WriteMemoryRaw(0x007C56B5, replaceHandler, sizeof(replaceHandler), true);

    // replaces a call to a nullsub
    injector::WriteMemoryRaw(0x00663D35, callPatch, sizeof(callPatch), true);
}

void FixTimebug()
{
    if (!TimebugFixEnabled)
        return;
    float tmpTime = injector::ReadMemory<float>(TimerAddress);
    if (tmpTime < PreviousRaceTime)
    {
        injector::WriteMemory<float>(GlobalTimerAddress, 0.0f);
    }
    PreviousRaceTime = tmpTime;
}


/*
 *	Patch note: 004549BF mov al, [edi]	; potentional dereferencing a null pointer
 *
 *	Attrib::StringToLowerCaseKey(const char* str) -- Happened if str was null
 */
void FixStringToLower()
{
    char newInstructions[] = {
        0x81, 0xC4, 0x00, 0x01, 0x00, 0x00, // add esp, 100h	; restore esp
        0x31, 0xC0, // xor eax, eax		; return 0
        0xC3
    }; // ret

    // Fixes Attrib::StringToLowerCaseKey
    injector::WriteMemory<short>(0x004549BF, 0xE0EB, true); // jump to patched code

    injector::WriteMemory<int>(0x004549A1, 0x0775FF85, true); // test edi, edi
    // jne	004549AC

    injector::WriteMemory<int>(0x004549A5, 0xB9EB5E5F, true); // pop edi
    // pop esi
    // jmp 00454962

    injector::WriteMemory<int>(0x004549AC, 0x11EB078A, true); // mov al,[edi]
    // jmp 004549C1		; return to normal operation

    injector::WriteMemoryRaw(0x00454962, newInstructions, sizeof(newInstructions), true);
}

typedef struct _PATCHINFO
{
    DWORD dwAddress; // Target instruction address
    DWORD dwSize; // Number of instruction bytes, 6 or 7.
    BYTE abPatch[7]; // Patch bytes. For speed.exe verification.
    // Can be omitted by opting to only patch the source MOV address.
} PATCHINFO, *LPPATCHINFO;


const static PATCHINFO aPatches[] = {
    {0x00401F1D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00401F40, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x00403710, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0040372D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00403780, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0040379D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x004037F0, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0040380D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00403860, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0040387D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x004038F0, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0040390D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00403960, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0040397D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00404070, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0040408D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00405250, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0040526D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00410297, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x004103DA, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x004103FD, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0041077A, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0041079D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0042E1C5, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0042E207, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0042E275, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0042E2B7, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0042E325, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0042E367, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0042E482, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0042E4C7, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00430CB9, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x00430CD2, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x00431BD2, 6, {0xc7, 0x03, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebx],0x8aa828
    {0x004321D0, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x00432290, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x004324FE, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x004328E4, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x00432FC2, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x00432FDB, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x00433302, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x00433327, 6, {0xc7, 0x03, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebx],0x8aa828
    {0x004335DE, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x00433859, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x004350EA, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x0043A9EA, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x0043B121, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x0043B215, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x0043B389, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x0043C93D, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x0043D046, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x0043D09A, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x0043D374, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x0043EFB9, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x00441913, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x00445680, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0044569D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0044582C, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x0044F1A3, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x00468400, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0046841D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x004738F8, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x00473DC3, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x00480C45, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00480C87, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00481110, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x0048132E, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x0048152E, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x00481A7B, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x00484C6B, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x0048500C, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x0048525F, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x004854EC, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x0048572C, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x00565050, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0056506D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x005650C0, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x005650DD, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00565130, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0056514D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x005651A0, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x005651BD, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00565210, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0056522D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00565280, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0056529D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x005652F0, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0056530D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00565360, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0056537D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x005653D0, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x005653ED, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00565440, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0056545D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x005654B0, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x005654CD, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00565520, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0056553D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00565590, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x005655AD, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00565600, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0056561D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00565670, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0056568D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x005656E0, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x005656FD, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00565750, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0056576D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x005657C0, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x005657DD, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00565820, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0056583D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00565890, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x005658AD, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00565900, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0056591D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00565960, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0056597D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x005659D0, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x005659ED, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00565A40, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x00565A5D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00565AB0, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x00565ACD, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0059C9E5, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0059CA27, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0059CADB, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x0059CBD8, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x0059CC8B, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x0059CE68, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x0059CF1B, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x0059D068, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x0059D11A, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x0059D248, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x0059D2FA, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x0059D3E8, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x0059DD8B, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x0059DE88, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x0059DF3B, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x0059E098, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x0059E14A, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x0059E208, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x0059E2BB, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x0059E3C8, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x0059E47C, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x0059E5C8, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x0059E67B, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x0059E798, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x0059E84B, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x0059E978, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x0059EA2B, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x0059EC18, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x0059ECCB, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x0059EDB8, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x0059EE6B, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x0059F088, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x0059F13D, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x0059F3E8, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x0059F49E, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x0059F768, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x0059FCDB, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x005A0008, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x005A00BA, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x005A0178, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x005A022A, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x005A0328, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x005A03DA, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x005A04D8, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x005A058C, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x005A06B8, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x005A0BDF, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x005A0CBC, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x005A0E98, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x005A0F4B, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x005A0F73, 6, {0xc7, 0x03, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebx],0x8aa828
    {0x005A1314, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x005A131F, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x005A13DD, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x005A1558, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x005DADC0, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x005DADDD, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x005DAE5F, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x005DAF16, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x005E3BD4, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x005EEA1F, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x005EF4A4, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x005F732A, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00621E20, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x00621E3D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00627890, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x006278AD, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00627930, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0063433B, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00634BA3, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x00634D5F, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x00643BC2, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00643C07, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00667CD0, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x00667CED, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00667D40, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x00667D5D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00667DA0, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x00667DBD, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00668100, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0066811D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006683A0, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x006683BD, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00668450, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0066846D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0066FC2C, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0066FC4D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0067232C, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x0067235C, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x0067BA55, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x0067BA6A, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x0067BB13, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x0067BCDE, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x0067BF46, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x0067E862, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0067E8A7, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0067E915, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0067E957, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0067E9E1, 6, {0xc7, 0x03, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebx],0x8aa828
    {0x0067E9FD, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0067EA55, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0067EA97, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0067F79D, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x006867EA, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x00686817, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x00686D83, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x00686D9A, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x00686F20, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x00686F34, 6, {0xc7, 0x03, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebx],0x8aa828
    {0x00686F53, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x00686F7B, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x00687656, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x00687FA9, 6, {0xc7, 0x03, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebx],0x8aa828
    {0x00687FBD, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x00688440, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x0068846D, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x006886DD, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x00688727, 6, {0xc7, 0x03, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebx],0x8aa828
    {0x00688757, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x00689077, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006890AA, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006890DD, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0068A6C0, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0068A770, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0068A78D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0068A7D0, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0068A7ED, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0068A840, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0068A85D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0068A8B0, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0068A8CD, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0068A920, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0068A93D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0068A980, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0068A99D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0068A9F0, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0068AA0D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0068AA50, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0068AA6D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0068AAB0, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0068AACD, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0068AB10, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0068AB2D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0068AB70, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0068AB8D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0068ABD0, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0068ABED, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0068B210, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0068B22D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0068B270, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0068B28D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0068B487, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0068B6F0, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0068B70D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0068B750, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0068B76D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0068C9C0, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0068C9DD, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0068CE00, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0068CE1D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0068CE60, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0068CE7D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006935FE, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x00694090, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x006940AD, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006940F0, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x0069410D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0069695D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0069B84B, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x0069CB17, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x0069CCFF, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x0069D0DC, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x006A023D, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x006A0254, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x006A026B, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x006A027F, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x006A0294, 6, {0xc7, 0x03, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebx],0x8aa828
    {0x006A02A8, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006A1085, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x006A109A, 6, {0xc7, 0x03, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebx],0x8aa828
    {0x006A10AE, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006A1E29, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006A2B0A, 6, {0xc7, 0x03, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebx],0x8aa828
    {0x006A2B1E, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006A3E85, 6, {0xc7, 0x03, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebx],0x8aa828
    {0x006A3E99, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006A4229, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006A443D, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006A4A09, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006A4B5B, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006AE097, 6, {0xc7, 0x03, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebx],0x8aa828
    {0x006B03A9, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006B1A67, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006B310C, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006B37F8, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x006B382A, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x006B3863, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x006B3895, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x006B38C7, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x006B38F9, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006B3B7A, 6, {0xc7, 0x03, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebx],0x8aa828
    {0x006B3BAD, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006B3E29, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x006B3E47, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x006B3F3A, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x006B3F6C, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x006B3FA5, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006B4217, 6, {0xc7, 0x03, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebx],0x8aa828
    {0x006B4388, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x006B43BA, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006B460A, 6, {0xc7, 0x03, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebx],0x8aa828
    {0x006B463A, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006B5585, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006B55C7, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006B5635, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006B5677, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006B56E5, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006B5727, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006B5795, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006B57D7, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006B58DA, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006B5927, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006B5A77, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006B5ABC, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006B6619, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x006B6637, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006B6695, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006B66D7, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006B6973, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006B7855, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x006B7870, 6, {0xc7, 0x03, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebx],0x8aa828
    {0x006B7898, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x006B78BB, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006B7B1F, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006B7DD2, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x006B7EE4, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006B7EF3, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x006B80B1, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x006B889B, 6, {0xc7, 0x03, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebx],0x8aa828
    {0x006B88AF, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x006B88C4, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006B8A6D, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006B8EB6, 6, {0xc7, 0x03, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebx],0x8aa828
    {0x006B8ED7, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x006B996B, 6, {0xc7, 0x03, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebx],0x8aa828
    {0x006B99A2, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x006B99D1, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006B9EBB, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x006B9F05, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006E8100, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x006E811D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006E817D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006E81D0, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x006E81ED, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006E8290, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x006E82AD, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006E82F0, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x006E830D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006EDB7A, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x006EDB9D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006EDC0A, 6, {0xc7, 0x01, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ecx],0x8aa828
    {0x006EDC2D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006EE8A7, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006EE8CB, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006EE970, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x006EE984, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006EEA7F, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006F0CC2, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006F6C22, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006F6C67, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006F7CB1, 6, {0xc7, 0x03, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebx],0x8aa828
    {0x006F7CCD, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006F7D41, 6, {0xc7, 0x03, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebx],0x8aa828
    {0x006F7D5D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006F7F39, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006F834C, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006F849B, 6, {0xc7, 0x03, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebx],0x8aa828
    {0x006F86B9, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x006F86DB, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006F8858, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x006F887F, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006F888E, 6, {0xc7, 0x03, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebx],0x8aa828
    {0x006F88A2, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x006F8AA3, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x006F8ACA, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006F8AD9, 6, {0xc7, 0x03, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebx],0x8aa828
    {0x006F8AED, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x006F90F6, 6, {0xc7, 0x02, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edx],0x8aa828
    {0x006F924F, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006F954A, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006F9660, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x006F968F, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006F9848, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006F9875, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006F98BB, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006F9BFA, 6, {0xc7, 0x03, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebx],0x8aa828
    {0x006F9C27, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006F9C6D, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006FACB2, 6, {0xc7, 0x03, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebx],0x8aa828
    {0x006FACE0, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006FC637, 7, {0xc7, 0x45, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [ebp+0x0],0x8aa828
    {0x006FC67F, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006FCA71, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006FCCF4, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006FD11D, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [esi],0x8aa828
    {0x006FD12F, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x006FD14C, 6, {0xc7, 0x00, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [eax],0x8aa828
    {0x006FD3E3, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x006FD427, 6, {0xc7, 0x07, 0x28, 0xa8, 0x8a, 0x00}}, // mov    DWORD PTR [edi],0x8aa828
    {0x00758FB8, 6, {0xc7, 0x06, 0x28, 0xa8, 0x8a, 0x00}} // mov    DWORD PTR [esi],0x8aa828
};

VOID PatchRefs(VOID)
{
    for (DWORD i = 0; i < ARRAYSIZE(aPatches); i++)
    {
        // Check if a correct instruction is present at the address
        CONST DWORD dwBadAddress = 0x00890970;
        BYTE abInstruction[7] = {0};
        memcpy(
            abInstruction,
            aPatches[i].abPatch,
            aPatches[i].dwSize
        );

        memcpy(
            (7 == aPatches[i].dwSize) ? &abInstruction[3] : &abInstruction[2],
            &dwBadAddress,
            sizeof(DWORD)
        );

        if (EXIT_SUCCESS != memcmp(
            abInstruction,
            (LPVOID)aPatches[i].dwAddress,
            aPatches[i].dwSize
        ))
        {
            CHAR szMessage[256] = {0};
            snprintf(
                szMessage,
                sizeof(szMessage),
                "Unsupported speed.exe:\n\n"
                "Instruction check %u/%u failed.\n"
                "@ 0x%08X mismatch with check 0x%08X\n",
                i + 1,
                ARRAYSIZE(aPatches),
                aPatches[i].dwAddress,
                (DWORD_PTR)abInstruction
            );
            MessageBoxA(NULL, szMessage, "MWCrashFix Error", MB_ICONERROR);
            return;
        }

        // Patch the instruction
        DWORD dwOldProtect;
        if (!VirtualProtect(
            (LPVOID)aPatches[i].dwAddress,
            aPatches[i].dwSize,
            PAGE_EXECUTE_READWRITE,
            &dwOldProtect
        ))
        {
            MessageBoxA(NULL, "VirtualProtect failed", "Error", MB_ICONERROR);
            return;
        }
        memcpy((LPVOID)aPatches[i].dwAddress, aPatches[i].abPatch, aPatches[i].dwSize);

        VirtualProtect(
            (LPVOID)aPatches[i].dwAddress,
            aPatches[i].dwSize,
            dwOldProtect,
            &dwOldProtect
        );
    }
}

void ReadConfig()
{
    CIniReader iniReader("MWFixes.ini");

    TimebugFixEnabled = iniReader.ReadInteger("Fixes", "TimebugFix", 0) == 1;
    StabilityPatchesEnabled = iniReader.ReadInteger("Fixes", "StabilityFixes", 0) == 1;
    // ShouldAddPurecallHandler = iniReader.ReadInteger("Fixes", "AddPurecallHandler", 0) == 1;
    PreventPurecalls = iniReader.ReadInteger("Fixes", "PreventPurecall", 0) == 1;
}

void Init()
{
    ReadConfig();
    // AddPurecallHandler();
    FixPurecall();
    if (!StabilityPatchesEnabled)
        return;
    FixMemory();
    FixStringToLower();
    FixSub_0057D0F0();
    PatchRefs();
}

DWORD WINAPI Background(LPVOID unused)
{
    while (true)
    {
        FixTimebug();
        Sleep(1);
    }
}

int WINAPI DllMain(HMODULE hInstance, DWORD reason, LPVOID lpReserved)
{
    if (reason == DLL_PROCESS_ATTACH)
    {
        uintptr_t base = (uintptr_t)GetModuleHandleA(NULL);
        IMAGE_DOS_HEADER* dos = (IMAGE_DOS_HEADER*)(base);
        IMAGE_NT_HEADERS* nt = (IMAGE_NT_HEADERS*)(base + dos->e_lfanew);


        // Copy-paste from MWExtraOptions
        if ((base + nt->OptionalHeader.AddressOfEntryPoint + (0x400000 - base)) == 0x7C4040)
        // Check if .exe file is compatible - Thanks to thelink2012 and MWisBest
        {
            Init();
            CreateThread(0, 0, Background, NULL, 0, NULL);
        }
        else
        {
            MessageBoxA(
                NULL, "This .exe is not supported.\nPlease use v1.3 English speed.exe (5,75 MB (6.029.312 bytes)).",
                "MWFixes", MB_ICONERROR);
            return FALSE;
        }
    }
    return TRUE;
}
